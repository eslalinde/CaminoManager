@page "/communities"
@using CaminoManager.ServiceDefaults.DTOs
@using CaminoManager.Web.Services
@inject CommunityService CommunityService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>Communities</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">Communities</MudText>

<MudButton StartIcon="@Icons.Material.Filled.Group" Color="Color.Primary" Variant="Variant.Filled" 
          OnClick="@(() => NavigationManager.NavigateTo("/communities/create"))" Class="mb-4">
    Add Community
</MudButton>

@if (_communities == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="_communities" T="CommunityDto" Dense="true" Hover="true" Bordered="true" Striped="true" 
                 QuickFilter="@_quickFilter">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Communities</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" 
                         Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" 
                         Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Number" Title="Number" />
            <PropertyColumn Property="x => x.BornDate" Title="Born Date" Format="dd/MM/yyyy"/>
            <PropertyColumn Property="x => x.BornBrothers" Title="Born Brothers" />
            <PropertyColumn Property="x => x.ActualBrothers" Title="Actual Brothers" />
            <PropertyColumn Property="x => x.StepWayDate" Title="Step Way Date" Format="dd/MM/yyyy"/>
            <PropertyColumn Property="x => x.OldCatechist" Title="Old Catechist" />

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" 
                                 OnClick="@(() => NavigationManager.NavigateTo($"/communities/edit/{context.Item.Id}"))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" 
                                 OnClick="@(async () => await DeleteCommunity(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CommunityDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<CommunityDto>? _communities;
    private string _searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _communities = await CommunityService.GetCommunitiesAsync();
    }

    private async Task DeleteCommunity(CommunityDto community)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Community",
            "Are you sure you want to delete this community?",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            await CommunityService.DeleteCommunityAsync(community.Id);
            _communities = await CommunityService.GetCommunitiesAsync();
        }
    }

    private Func<CommunityDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Number.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.OldCatechist?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            return true;

        return false;
    };
}