@page "/people"
@using CaminoManager.Data.Models
@using CaminoManager.Web.Services
@using Microsoft.Extensions.Localization
@using CaminoManager.ServiceDefaults.DTOs
@inject PersonService PersonService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IStringLocalizer<Shared> Localizer

<PageTitle>@Localizer["People"]</PageTitle>

<MudText Typo="Typo.h3" Class="mb-4">@Localizer["People"]</MudText>

<MudButton StartIcon="@Icons.Material.Filled.People" Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => NavigationManager.NavigateTo("/people/create"))" Class="mb-4">
    @Localizer["AddPeople"]
</MudButton>

@if (_people == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="_people" T="PersonDto" Dense="true" Hover="true" Bordered="true" Striped="true" QuickFilter="@_quickFilter"
                 EditMode="@DataGridEditMode.Form" EditTrigger="@DataGridEditTrigger.Manual"
                 FilterMode="@DataGridFilterMode.Simple" FilterCaseSensitivity="@DataGridFilterCaseSensitivity.Default">
        <ToolBarContent>
            <MudText Typo="Typo.h6">@Localizer["People"]</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="@Localizer["Search"]" Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.PersonName" Title="@Localizer["PersonName"]" />
            <PropertyColumn Property="x => x.Phone" Title="@Localizer["Phone"]" />
            <PropertyColumn Property="x => x.Mobile" Title="@Localizer["Mobile"]" />
            <PropertyColumn Property="x => x.Email" Title="@Localizer["Email"]" />
            <PropertyColumn Property="x => x.GenderId" Title="@Localizer["Gender"]">
                <CellTemplate>
                    @{
                        var genderType = Enum.IsDefined(typeof(GenderType), context.Item.GenderId) 
                            ? (GenderType)context.Item.GenderId 
                            : GenderType.Unknown;
                        @Localizer[$"{genderType}"]
                    }
                </CellTemplate>
                <EditTemplate>
                    <MudSelect T="int" @bind-Value="context.Item.GenderId"
                             Label="@Localizer["Gender"]"
                             Required="true"
                             RequiredError="@Localizer["SelectGender"]"
                             Margin="@Margin.Dense">
                        @foreach (GenderType gender in Enum.GetValues(typeof(GenderType)))
                        {
                            <MudSelectItem Value="@((int)gender)">@Localizer[$"{gender}"]</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.PersonTypeId" Title="@Localizer["PersonType"]">
                <CellTemplate>
                    @{
                        var personType = Enum.IsDefined(typeof(PersonType), context.Item.PersonTypeId) 
                            ? (PersonType)context.Item.PersonTypeId 
                            : PersonType.Unknown;
                        @Localizer[$"{personType}"]
                    }
                </CellTemplate>
                <EditTemplate>
                    <MudSelect T="int" @bind-Value="context.Item.PersonTypeId"
                             Label="@Localizer["PersonType"]"
                             Required="true"
                             RequiredError="@Localizer["SelectPersonType"]"
                             Margin="@Margin.Dense">
                        @foreach (PersonType type in Enum.GetValues(typeof(PersonType)))
                        {
                            <MudSelectItem Value="@((int)type)">@Localizer[$"{type}"]</MudSelectItem>
                        }
                    </MudSelect>
                </EditTemplate>
            </PropertyColumn>

            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => NavigationManager.NavigateTo($"/people/edit/{context.Item.Id}"))" />
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(async e => await DeletePerson(context.Item))" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PersonDto" />
        </PagerContent>
    </MudDataGrid>
}

@code {
    private List<PersonDto>? _people;
    private string _searchString;
    
    protected override async Task OnInitializedAsync()
    {
        _people = await PersonService.GetPeopleAsync();
    }

    private async Task DeletePerson(PersonDto person)
    {
        var result = await DialogService.ShowMessageBox(
            Localizer.GetString("DeletePerson"),
            Localizer.GetString("DeletePersonMessage"),
            yesText: Localizer.GetString("Delete"),
            cancelText: Localizer.GetString("Cancel"));

        if (result == true)
        {
            await PersonService.DeletePersonAsync(person.Id);
            _people = await PersonService.GetPeopleAsync();
        }
    }

    private Func<PersonDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.PersonName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Mobile.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
} 